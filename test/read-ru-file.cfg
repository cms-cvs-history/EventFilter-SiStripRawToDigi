process ReadRUFile = {

service = MessageLogger {
	vstring destinations = { "event.log", "error.log", "debug.log" } // names of "log" files 
	untracked PSet error.log = { untracked string threshold = "WARNING" untracked PSet default = { untracked int32 limit = -1 untracked bool noLineBreaks = false } }
	untracked PSet event.log = { untracked string threshold = "INFO"    untracked PSet default = { untracked int32 limit = -1 untracked bool noLineBreaks = false } }
	untracked PSet debug.log = { untracked string threshold = "DEBUG"   untracked PSet default = { untracked int32 limit = -1 untracked bool noLineBreaks = false } }
	vstring debugModules = { "*" }			// comment to inhibit ("time-consuming") debug verbosity 
}

#service = Tracer {} // framework debugging...	

// Populates FED cabling object. If "UsingDb", require username, password and path, else, require input xml file(s) 
es_source FedCabling = SiStripFedCablingBuilderFromDb {
	untracked bool   UsingDb = false
	untracked string User    = "cmsdbtr"
	untracked string Passwd  = "fred"
	untracked string Path    = "devdb"
	untracked string InputModuleXml = "/afs/cern.ch/cms/cmt/onlinedev/data/petal11.xml"
}

// Reads "maxEvents" events (-1 = "all") from RU file(s). 
source = TBRUInputSource
{
	untracked vstring fileNames = { "file:/afs/cern.ch/cms/cmt/onlinedev/data/RU0030349_000.root" }
	untracked int32 maxEvents = -1
	#untracked int32 nFeds = 1 // overrides number of FEDs in RU file 
}

// Extract digis (and "trigger FED" info) from FED buffers.
module RawToDigi = SiStripRawToDigiModule 
{
	string InputModuleLabel = "TBRUInputSource" // module label of "FEDRawData source"
	#untracked int32 AppendedBytes = 0			// removes number of bytes appended prior to FED buffer
       	#untracked int32 FedBufferDumpFreq = 0			// frequency with which FED buffers are dumped to stdout
       	untracked bool  UseFedKey = false			// switch b/w DetId and FedKey to index digi collections
       	#untracked int32 TriggerFedId = 1023			// source id for trigger FED information
}

// Writes pool output file with "fileName"
module PoolOutput = PoolOutputModule { untracked string fileName ="output.root" }

path p = { RawToDigi }
endpath e = { PoolOutput }

}

