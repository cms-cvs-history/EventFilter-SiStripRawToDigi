process ReadRUFile = {

service = MessageLogger {
	vstring destinations = { "event.log", "error.log", "debug.log" } // names of "log" files 
	PSet error.log = { string threshold = "WARNING" PSet default = { int32 limit = -1 bool noLineBreaks = false } }
	PSet event.log = { string threshold = "INFO"    PSet default = { int32 limit = -1 bool noLineBreaks = false } }
	PSet debug.log = { string threshold = "DEBUG"   PSet default = { int32 limit = -1 bool noLineBreaks = false } }
	vstring debugModules = { "*" }			// comment to inhibit ("time-consuming") debug verbosity 
}

#service = Tracer {} 					// framework debugging...

es_source FedCabling = SiStripFedCablingBuilderFromDb
{ 
	untracked string User = "cmsdbtr"		// user name for configuration database account
	untracked string Passwd = "fred"		// password for configuration database account
	untracked string Path = "devdb"			// path for configuration database account
	untracked string Partition = "904"		// partition name for hardware setup
	untracked bool   UseXmlFile = true		// use "module.xml" file instead of database
	untracked string XmlFileName = "/afs/cern.ch/cms/cmt/onlinedev/data/petal11.xml" // path and filename of "module.xml" 
}

source = TBRUInputSource
{
	untracked vstring fileNames = { "file:/afs/cern.ch/cms/cmt/onlinedev/data/RU0030349_000.root" } // path and filename of "RU" file
	untracked int32 maxEvents = -1			// number of events to process (-1 = "all")
	#untracked int32 nFeds = 1 			// overrides number of found FEDs in "RU" file 
}

module RawToDigi = SiStripRawToDigiModule 
{
	string InputModuleLabel = "TBRUInputSource"		// module label of "FEDRawData source"
	untracked int32 AppendedBytes = 0			// removes number of bytes appended prior to FED buffer
       	untracked int32 FedBufferDumpFreq = 0			// frequency with which FED buffers are dumped to stdout
       	untracked bool  UseFedKey = true			// switch b/w DetId and FedKey to index digi collections
       	untracked int32 TriggerFedId = 1023			// source id for trigger FED information
}

module PoolOutput = PoolOutputModule 
{ 
	untracked string fileName ="output.root"  		// output file name
	#untracked vstring outputCommands = { "keep *" }	// make persistent all data types 
}

path p = { RawToDigi }						// defines processing order of plug-in modules
endpath e = { PoolOutput }					// performed after all modules listed in "path"

}

